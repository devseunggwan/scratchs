---
alwaysApply: true
---

# üöÄ Scratchs Repository Cursor Rules

> A comprehensive guide for maintaining consistent, high-quality code across all scratch projects.

## üìã Project Overview

This repository is a collection of scratch projects for experimenting, learning, and prototyping with various technology stacks and platforms.

## üìÅ Directory Structure

| Directory | Purpose |
|-----------|---------|
| `api/` | API clients and integration code (Kakao, Naver, Coupang, etc.) |
| `data-processing/` | Data processing and ETL pipelines |
| `infrastructure/` | Infrastructure code with Terraform |
| `languages/` | Learning and experimentation with various programming languages |
| `laplace/` | Laplace ETL related projects |
| `machine-learning/` | Machine learning and LLM related experiments |
| `platforms/` | Experiments with various platforms (Snowflake, Dagster, Prefect, DBT, etc.) |

---

## üõ†Ô∏è Development Tools and Standards

### üì¶ Package Management with UV

> **Primary Tool**: Use UV for all Python package management

- ‚úÖ **Replace legacy tools**: Use UV instead of pip, pipenv, poetry
- ‚úÖ **Project initialization**: `uv init` to create new projects with proper structure
- ‚úÖ **Dependency management**: 
  - Add packages: `uv add <package>`
  - Remove packages: `uv remove <package>`
- ‚úÖ **Virtual environment**: UV automatically manages virtual environments
- ‚úÖ **Lock files**: Always commit `uv.lock` files for reproducible builds
- ‚úÖ **Python version**: Specify in `pyproject.toml` using `requires-python = ">=3.11"`

### üîç Code Quality with Ruff

> **Primary Tool**: Use Ruff for linting and formatting

- ‚úÖ **Unified tooling**: Replace flake8, black, isort with Ruff
- ‚úÖ **Configuration**: Use `ruff.toml` or `pyproject.toml` for settings
- ‚úÖ **Pre-commit hooks**: Set up automatic code quality checks
- ‚úÖ **IDE integration**: Configure real-time linting and formatting
- ‚úÖ **CI/CD**: Run `ruff check` and `ruff format --check` in pipelines

---

## üêç Python Code Style

### Core Principles

1. **Type Hints Required** - All functions and methods must have type hints
2. **Pydantic for Data Models** - Use Pydantic for settings and data validation
3. **Async Programming** - Use asyncio and async/await for I/O operations
4. **Error Handling** - Use specific exception types, not bare except clauses
5. **Structured Logging** - Use loguru or standard logging module
6. **Environment Variables** - Use python-dotenv and pydantic-settings
7. **Documentation** - Write comprehensive docstrings for all public functions
8. **Testing** - Write unit tests using pytest, aim for high coverage

---

## üìä Data Processing Standards

- **Polars over Pandas** - Prefer Polars for data manipulation and analysis
- **SQLAlchemy ORM** - Use SQLAlchemy for database operations
- **DuckDB for Local Analysis** - Use DuckDB for local data analysis and prototyping
- **Batch Processing** - Process large datasets in batches to avoid memory issues

---

## üåê API Development

- **FastAPI for REST APIs** - Use FastAPI for building REST APIs
- **Streamlit for Dashboards** - Use Streamlit for data visualization and prototyping
- **Bearer Token Authentication** - Implement for API endpoints
- **Pydantic Models** - Use for API request/response validation

---

## üìù File Naming Conventions

- **Scratch files**: `scratch.py` or `scratch.ipynb` for experimental code
- **Date-based directories**: `YYYYMMDD` format for organizing daily experiments
- **Descriptive names**: Use clear, descriptive names that indicate functionality

---

## üèóÔ∏è Project Structure

- **pyproject.toml** - Use for all Python project configuration
- **Dependencies** - Pin major versions, allow patch updates
- **Development dependencies** - Separate from production ones
- **README files** - Include README.md in each project directory

---

## ‚úÖ Quality Checklist

Before committing code, ensure:

- [ ] Type hints are present on all functions
- [ ] Code passes `ruff check` and `ruff format`
- [ ] Dependencies are managed with UV
- [ ] Tests are written for new functionality
- [ ] Documentation is updated
- [ ] Environment variables are properly configured

---

*These rules ensure consistent, high-quality code across all projects in the repository.*